\documentclass [a4paper] {article}
\usepackage[spanish]{babel}
\selectlanguage{spanish}
\usepackage[utf8]{inputenc}
\usepackage{minibox}

\usepackage{hyperref}

\title
{Elementos de programaci√≥n en R-Cran}

\author{OJEDA,YESICA R. - Facultad de Ingenier√≠a \\
<yesimza@gmail.com> \\ 

\\Universidad Nacional de Cuyo}



\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle
\section*{Elementos b√°sicos de programaci√≥n}

\begin{itemize}
  \item Conocer y profundizar la comprensi√≥n de las funciones b√°sicas del software RStudio.

  \item Utilizar algoritmos bien conocidos.
  \item Comparar las soluciones obtenidas utilizando algoritmos conocidos con las soluciones que brinda RStudio el cual posee sus propios algoritmos.
  \item Comparar el costo computacional, medido como tiempo de ejecuci√≥n. Esto permitir√° entender la calidad del algoritmo que se implementa.
\end{itemize}

\section*{Consignas del Trabajo}

\begin{itemize}
  \item Revisar los algoritmos que se presentan en el apartado de actividades. Primero se deber√° ejecutarlos en la lÌnea de comando de la consola y luego hacer scripts de cada uno
  \item Generar un vector secuencia y tomar el tiempo para resolverlo.
  \item Implementaci√≥n de una serie Fibonacci.
  \item Ordenar un vector por m√≥todo burbuja y sort, comparaci√≥n de uso de recursos y rapidez de ambos comandos.
  \item Progresi√≥n geomÈtrica del COVid-19 y generaci√≥n de mapa
  \item Utilizaci√≥n de base de datos propia y base de datos externa actualizable.
  \item Compilar todo y presentarlo en un infome formato pdf construido con RStudio, archivo rswave y Latex
\end{itemize}
\section*{Herramientas para medir el tiempo de ejecuci√≥n}
  La actividad propuesta requiere de medir el correspondiente tiempo de ejecuci√≥n de los algoritmos ejecutados. Para llevar a cabo esta tarea R-Studio cuenta con al menos tres paquetes R que permiten comparar la perfomance de los c√≥digos en cuestiÛn (rbenchmark, microbenchmark y tictoc). Estos adem·s de medir el tiempo nos indican porcentaje de memoria y microprocesador
utilizados.

  Adem√°s, el lenguaje R proporciona al menos dos m√≥todos para medir el tiempo de ejecuci√≥n del c√≥digo R (Sys.time y system.time), que es una aproximaci√≥n bastante √≥til para un curso como el que desarrollamos.
  Todos los comandos anteriormente mencionados pueden ser consultados en R-Studio colocando en la consola " ?nombre del comando " por ejemplo ?tictoc.

  Antes de comenzar se recomienda hacer una limpieza del entorno con los comandos 
<<T1,echo=TRUE>>=
rm(list = ls())
@

  Ahora se ejecuta primero el comando tic-toc, donde " tic " es como dar la largada en un cronometro y "toc" cuando se finaliza.
  
\subsection{Usando tic-toc}
<<T1,echo=TRUE>>=
library(tictoc)
A<-20
tic("sleeping")
print("dormir siesta")
Sys.sleep(2)
print("....suena el despertador")
toc()
@

\subsection{Usando sleeping}
<<T1,echo=TRUE>>=
#CÛdigo para sys.sleep Verificad
sleep_for_a_minute <- function() { Sys.sleep(14) }
start_time <- Sys.time()
sleep_for_a_minute()
end_time <- Sys.time()
end_time - start_time
'Resultado que me dio es...'
print(end_time- start_time)
@

  Este comando tiene como desventaja que Si se usa dentro de un documento en R-Studio se demorar√≥ mucho tiempo cuando se compile un PDF o una presentaci√≥n.
  
\section*{Generar un vector secuencia y medir el tiempo}
<<T1,echo=TRUE>>=
start_time <- Sys.time()
for (i in 1:50000) { A[i] <- (i*2)}
head(A)
tail(A)
end_time <- Sys.time()
end_time - start_time

start_time <- Sys.time()
B <- seq(1,1000000, 2)
head (B)
tail (B)
end_time <- Sys.time()
end_time - start_time
print(end_time- start_time)
@

\section*{Ordenar de un vector por me√≥todo burbuja y comparaci√≥n con Sort usando benchmark}
<<T1,echo=TRUE>>=
x<-sample(1:20000,10)
#plot(x)
burbuja <- function(x){
  n<-length(x)
  for(j in 1:(n-1)){
    for(i in 1:(n-j)){
      if(x[i]>x[i+1]){
        temp<-x[i]
        x[i]<-x[i+1]
        x[i+1]<-temp
      }
    }
  }
  return(x)
}

#Muestra obtenida
resBurbuja<-burbuja(x)

#Muestra Ordenada
x<-sample(1:20000,10)
sort(x)
respSort<-sort(x)
@

  Ahora se busca comparar el uso de recursos entre burbuja y sort
 
<<T1,echo=TRUE>>=
library(printr)
library(ggrepel)
library(ggplot2)
library(microbenchmark)
mbm1<-microbenchmark(
  resBurbuja,respSort)
mbm1

#Mostrar resultado de mbm
autoplot(mbm1)
@
  Se debe seÒalar que el resultado var√≠a todas las veces que se realiza, ya que depende de si hay otras ventanas abiertas y de la capacidad del procesador y la memoria que se posea la m√°quina.

 Si se compara sort respecto de burbuja, se obtiene:
<<T1,echo=TRUE>>=
mbm2<-microbenchmark(
  respSort,
  resBurbuja)
print(mbm2)

#Mostrar resultado de mbm
autoplot(mbm2)
@

\section*{Progresi√≥n geom√≥trica, Fibonacci}

  Primero se calcula Fibonacci
<<T1,echo=TRUE>>=
for(i in 0:500000)
{ a<-i
b <-i+1
c <- a+b
# comentar esta lÌnea para conocer el n˙umero m·s grande hallado
#print(c)
}
print(c)
@

  Luego, usando una base de datos en formato csv sobre el COVID-19 al 9 de marzo de 2020, que est·n est·ticas en la computadora.

  Para modelar el problema se usa una progresi√≥n geom√≥trica
<<T1,echo=TRUE>>=
library(readr)
casos_A <- read_delim("C:/Users/YES/Desktop/TP COVID/BD COVID/casos.csv", 
                      ";", escape_double = FALSE, trim_ws = TRUE, 
                      skip = 1)
#view(casos_A)
summary(casos_A)
m <- length(casos_A$Casos)
F <- (casos_A$Casos[2:m])/(casos_A$Casos[1:m-1])
mean(F,na.rm = TRUE)
sd(F,na.rm = TRUE)
var(F,na.rm = TRUE)
@

\section*{Uso de base externa y generaci√≥n de mapa con localizaci√≥n de casos}
  Se utiliz√° en el caso anterior y en este datos proporicionados por el hospital J. Hopkings de USA, los cuales son actualizados y de libre uso en el repositorio Github

  
<<T1,echo=TRUE>>=

#Generaci√≥n de mapa con infectados
library(readr)
datacovid_Jun7_global <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
#View(datacovid_Jun7_global)
#Para saber en cu·ntas regiones se subidividen los paÌses
#paises <- summary(factor(datacovid_Jun7_global$`Country/Region`))
#head(paises)

#Calculo para el 25 de marzo
'La cantidad de infectados al 25 de marzo de 2020 es..'
datacovid_Jun7_global[datacovid_Jun7_global$`Country/Region`=="Argentina",68]
@

<<Fig3,echo=TRUE,fig=TRUE>>=
library(maps)
library(ggrepel)
library(ggplot2)
library(rlang)
library(tidyverse)
library(viridis)
library(dplyr)
library(maps)
library(ggrepel)
planisferio <- map_data("world")
total_infec <-length(datacovid_Jun7_global)
datas_map <- datacovid_Jun7_global[ , c(1,2,3,4,total_infec)]

## get the COVID-19 data

# cutoffs based on the number of cases
mybreaks <- c(1, 200, 1000, 10000, 500000)

total_infec <-length(datacovid_Jun7_global)
datas_map <- datacovid_Jun7_global[ , c(1,2,3,4,total_infec)]
ggplot() +
  geom_polygon(data = planisferio, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
  geom_point(data=datacovid_Jun7_global, aes(x=Long, y=Lat, size=`4/17/20`, color=`4/17/20`), alpha=0.7) +
  scale_size_continuous(name="Cases", trans="log", range=c(1,7),breaks=mybreaks, labels = c("1-999", "1000-9999", "10,000-99,999", "100,000-999,999", "1,000,000+")) +
  
  scale_color_viridis_c(option="inferno",name="Cases", trans="log",breaks=mybreaks, labels = c("1-999", "1000-9999", "10,000-99,999", "100,000-999,999", "1,000,000+")) +
  theme_void() + 
  guides( colour = guide_legend()) +
  labs(caption = "Basado en datos oficiales Johns Hopkins CSSE. Visualization UNCuyo-Argentina ") +
  theme(
    legend.position = "bottom",
    text = element_text(color = "#22211d"),
    plot.background = element_rect(fill = "#ffffff", color = NA), 
    panel.background = element_rect(fill = "#ffffff", color = NA), 
    legend.background = element_rect(fill = "#ffffff", color = NA)
  )
@

\section*{Conclusi√≥n}
  Realizar este pra√°ctico me permiti√≥ introducirme y  profundizar el conocimiento en la utilizaci√≥n de RStudio y comprender m√°s del lenguaje de programaci√≥n R y pudiendo dar distintos modos de visibilidad a los resultados.

  Adem√°s, puede ser un buen punto de inicio si se quiere trabajar en √°reas relacionadas a Data analist, Data Scientist, entre otras.

  Entre los conocimientos que adquir√≠ se pueden nombrar:

\begin{itemize}
  \item Generar un vector secuencia.
  \item Implementaci√≥n de una serie Fibonacci.
  \item Orden de un vector por mÈtodo burbuja y sort.
  \item Creaci√≥n de un mapograma
  \item Uso de secciones y recuadros
  \item Uso de Rsweave para generar PDFs
  \item Instalar Bibliotecas
  \item Trabajar con archivos .csv y Datasets
\end{itemize}
  Lamentablemente, no logrÈ incorporar los gr√°ficos en el texto principal. Si se generaron en un documento aparte y los pude visualizar en R-Studio-
\end{document}

\end{document}

\end{document}
